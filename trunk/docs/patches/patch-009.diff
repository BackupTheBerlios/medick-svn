Index: libs/action/controller/Base.php
===================================================================
--- libs/action/controller/Base.php	(revision 182)
+++ libs/action/controller/Base.php	(working copy)
@@ -151,6 +151,17 @@
         if (is_file($helper_location)) {
             include_once($helper_location);
         }
+        
+        // {{{ hook RouteParams here.
+        $hij= array();
+        $route= Registry::get('__map')->getCurrentRoute();
+        foreach($route->getParams() as $param) {
+            $hij[$param->getName()]['message'] = 'foo';
+            $hij[$param->getName()]['value']   = $param->getValue();
+        }
+        $this->template->__param = $hij;
+        // }}}
+        
         if (is_file($_layout=$this->app_path . 'views' . DIRECTORY_SEPARATOR .  '__layout.phtml')) {
             $this->logger->debug('Found magick __layout description file...');
             $this->template->__content= 
Index: libs/action/controller/Map.php
===================================================================
--- libs/action/controller/Map.php	(revision 182)
+++ libs/action/controller/Map.php	(working copy)
@@ -46,6 +46,17 @@
      */
     private $routes = array();
 
+
+    private $curent_route;
+    
+    public function setCurrentRoute(Route $route) {
+        $this->curent_route= $route;
+    }
+    
+    public function getCurrentRoute() {
+        return $this->curent_route;
+    }
+
     /**
      * Adds a route to this map
      * @param Route route
Index: libs/action/controller/Route.php
===================================================================
--- libs/action/controller/Route.php	(revision 182)
+++ libs/action/controller/Route.php	(working copy)
@@ -39,7 +39,7 @@
 
     /** @var string
         this route name */
-    private $name;
+    private $name = '';
     
     /** @var string
         route controller name */
@@ -119,7 +119,7 @@
      * @return string name of this route.
      */
     public function getName() {
-        return $this->name;
+        return $this->name == '' ? $this->controller . '/' . $this->action : $this->name;
     }
 
     /**
@@ -198,6 +198,12 @@
         return $argument;
     }
 
+    public function addFromArray($params) {
+        foreach($params as $param) {
+            $this->add($param);   
+        }
+    }
+
     /**
      * Gets the list with the attached params
      * @return array RouteParam[]
Index: libs/action/controller/Routing.php
===================================================================
--- libs/action/controller/Routing.php	(revision 182)
+++ libs/action/controller/Routing.php	(working copy)
@@ -43,37 +43,39 @@
      * Check if the application Map contains the current Route.
      */
     public static function recognize(Request $request) {
-        $controller= $request->getParam('controller');
-        $action    = $request->getParam('action');
         $map= Registry::get('__map');
-        
         // do we know this Route?
-        if ($route= $map->contains(new Route($controller,$action))) {
+        if ($route= $map->contains(new Route($request->getParam('controller'), $request->getParam('action')))) {
+            $is_failure= FALSE;
+            $params= $route->getParams();
             // {{{ loop throught the Route Parameters
-            foreach ($route->getParams() AS $param) {
+            foreach ($params AS $param) {
                 
                 // {{{ if this Request has the current parameter, try to validate him.
                 if (!$request->hasParam($param->getName()) OR ($request->getParam($param->getName()) =='')) {
                     // XXX. load failure due to missing parameters.
-                    $route= $map->getRouteByName($route->getFailure());
+                    $is_failure= TRUE;
+                    
                     // XXX. failure message.
-                    break;
+                    // break;
                 } // }}}
-                
                 // {{{ if this paramester has attached validators,
                 if ($param->hasValidators()) {
                     // loop throught the validators and validate this parameter value.
                     foreach($param->getValidators() AS $validator) {
                         $validator->setValue($request->getParam($param->getName()));
                         if (!$validator->validate()) {
-                          // XXX. validation failed, handle automatically.
+                          // XXX. validation failed, handle automatically and break(?)
                           throw new RouteException('Route validation failed!');
                         }
                     }
                 } // }}}
-                
-            } // }}}
-            
+                $param->setValue($request->getParam($param->getName()));
+            } // end foreach. }}}
+            if ($is_failure) {
+                $route= $map->getRouteByName($route->getFailure());
+                $route->addFromArray($params);
+            }
         } else {
             $route= $map->getRouteByName('default');
         }
@@ -81,6 +83,7 @@
         // overwrite incoming core parameters.
         $request->setParam('controller', $route->getController());
         $request->setParam('action', $route->getAction());
+        $map->setCurrentRoute($route);
         return self::createController($route);
     }
 
